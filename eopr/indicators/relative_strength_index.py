"""
Relative Strength Index (RSI)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The RSI is a momentum oscillator that measures the speed and change of price movements.
RSI oscillates between zero and 100. Traditionally, and according to Wilder, RSI is
considered overbought when above 70 and oversold when below 30. Signals can also be
generated by looking for divergences, failure swings and centerline crossovers. RSI can
also be used to identify the general trend.
"""


def calculate_rsi(candles: list[float], period: int) -> list[float]:
    """Calculate the RSI values. It iterates over the candlestick data, updates the
    average gain and loss for each period, and calculates the RSI value for each data
    point.

    Args:
        data (list[float]): Candlestick data for the RSI calculation (e.g. close prices)
        period (int): The period for the RSI calculation (e.g. 14)
    """
    rsi_values: list[float] = []
    gain_values: list[float] = []
    loss_values: list[float] = []

    for i in range(1, len(candles)):
        change = candles[i] - candles[i - 1]
        if change >= 0:
            gain_values.append(change)
            loss_values.append(0)
        else:
            gain_values.append(0)
            loss_values.append(abs(change))

        if i >= period:
            avg_gain = sum(gain_values[-period:]) / period
            avg_loss = sum(loss_values[-period:]) / period
            rs = avg_gain / avg_loss if avg_loss != 0 else 0
            rsi = 100 - (100 / (1 + rs))
            rsi_values.append(rsi)

    return rsi_values


def analyze_rsi(rsi_values: list[float], overbought_level: int, oversold_level: int):
    """Analyze each RSI value by comparing it to the overbought and oversold levels.

    Args:
        rsi_values (list[float]): The RSI values to analyze (e.g. [70.0, 30.0, 50.0])
        overbought_level (int): The overbought level (e.g. 70)
        oversold_level (int): The oversold level (e.g. 30)
    """
    for rsi in rsi_values:
        if rsi >= overbought_level:
            print(f"RSI is overbought: {rsi}")
        elif rsi <= oversold_level:
            print(f"RSI is oversold: {rsi}")
        else:
            print(f"RSI is within normal range: {rsi}")


if __name__ == "__main__":
    # Example usage
    candles = [30468.708, 30468.705, 30468.707, 30468.709, 30468.708]
    period = 14
    overbought_level = 70
    oversold_level = 30

    rsi_values = calculate_rsi(candles, period)
    analyze_rsi(rsi_values, overbought_level, oversold_level)
