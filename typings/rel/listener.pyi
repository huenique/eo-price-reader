"""
This type stub file was generated by pyright.
"""

"""
This module includes four classes: Event, SocketIO, Signal, and Timer.

### Event
This class uses a Registrar subclass instance to manage read, write,
signal, and timeout events.

### SocketIO
This class uses a Registrar subclass instance to manage read, and
write events.

### Signal
This class uses the signal library and a Registrar subclass instance
to manage signal events.

### Timer
This class uses a Registrar subclass to manage timer events.
"""
EV_PERSIST = ...
EV_READ = ...
EV_SIGNAL = ...
EV_TIMEOUT = ...
EV_WRITE = ...
noadd = ...
def contains(mode, bit):
    ...

class Event:
    def __init__(self, registrar, cb, arg, evtype, handle) -> None:
        ...
    
    def spawn_children(self): # -> None:
        ...
    
    def add(self, delay=...): # -> None:
        ...
    
    def delete(self): # -> None:
        ...
    
    def pending(self): # -> Literal[1]:
        ...
    
    def callback(self): # -> None:
        ...
    


class SocketIO:
    def __init__(self, registrar, evtype, sock, cb, *args) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def persistent(self): # -> None:
        ...
    
    def add(self, delay=...): # -> None:
        ...
    
    def delete(self): # -> None:
        ...
    
    def dereference(self): # -> None:
        ...
    
    def pending(self): # -> int:
        ...
    
    def callback(self): # -> None:
        ...
    


class Signal:
    def __init__(self, registrar, sig, cb, *args) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def add(self, delay=...): # -> None:
        ...
    
    def delete(self): # -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def pending(self): # -> int:
        ...
    
    def callback(self, *args): # -> None:
        ...
    


class Timer:
    def __init__(self, registrar, delay, cb, *args) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def add(self, delay=...): # -> None:
        ...
    
    def delete(self, dereference=...): # -> None:
        ...
    
    def pending(self): # -> Literal[1, 0]:
        ...
    
    def check(self, t=...): # -> bool:
        ...
    


