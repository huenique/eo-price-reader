"""
This type stub file was generated by pyright.
"""

"""
This module includes the Registrar class and four subclasses,
KqueueRegistrar, SelectRegistrar, PollRegistrar, and EpollRegistrar,
each of which utilizes a different subsystem (kqueue, select, poll,
or epoll) to manage read and write events. Registrar and its subclasses
also manage signals and timers.

### Reads and Writes
Reads and writes are handled by the SocketIO class defined in the
listener module, which is instantiated by a couple Registrar functions:

    def read(self,sock,cb,*args):
        return SocketIO(self,'read',sock,cb,*args)

    def write(self,sock,cb,*args):
        return SocketIO(self,'write',sock,cb,*args)

### Signals and Timers
Signals and timers are handled by the Signal and Timer classes
defined in the listener module, which can be instantiated through
a couple Registrar functions:

    def signal(self,sig,cb,*args):
        return Signal(self,sig,cb,*args)

    def timeout(self,delay,cb,*args):
        return Timer(self,delay,cb,*args)

The Registrar API is taken from [pyevent](https://github.com/jaraco/pyevent),
which is a wrapper around [libevent](http://monkey.org/~provos/libevent/).

Note that while rel can be configured to use pyevent under the hood
(instead of one of the Registrar subclasses), such usage forfeits
various benefits of the pure-Python Registrar subclasses, including
GIL integration / thread compatibility.

### Event Engine Rates
Another benefit of the pure-Python Registrar subclasses (wrapping epoll,
poll, kqueue, and select - by default, rel uses the fastest available) is
that they run at configurable rates. By default, rel's CPU footprint is
unnoticeably tiny unless it's currently managing active writes, in which
case it ramps up to push the bytes through faster. These rates (normal
and turbo) can be adjusted with a couple functions:

    def set_sleep(s):
        global SLEEP_SEC
        SLEEP_SEC = s

    def set_turbo(s):
        global SLEEP_TURBO
        SLEEP_TURBO = s
"""
LISTEN_KQUEUE = ...
LISTEN_SELECT = ...
LISTEN_POLL = ...
SLEEP_SEC = ...
SLEEP_TURBO = ...
def set_sleep(s): # -> None:
    ...

def set_turbo(s): # -> None:
    ...

def kbint(signals): # -> Literal[True]:
    ...

class Registrar:
    def __init__(self) -> None:
        ...
    
    def report(self): # -> dict[str, int]:
        ...
    
    def signal_add(self, sig): # -> None:
        ...
    
    def signal_remove(self, sig): # -> None:
        ...
    
    def init(self): # -> None:
        ...
    
    def event(self, callback, arg, evtype, handle): # -> Event:
        ...
    
    def read(self, sock, cb, *args): # -> SocketIO:
        ...
    
    def write(self, sock, cb, *args): # -> SocketIO:
        ...
    
    def dispatch(self): # -> None:
        ...
    
    def loop(self): # -> dict[Unknown, Unknown] | Literal[True]:
        ...
    
    def abort(self): # -> None:
        ...
    
    def abort_branch(self):
        ...
    
    def signal(self, sig, cb, *args): # -> Signal:
        ...
    
    def timeout(self, delay, cb, *args): # -> Timer:
        ...
    
    def add_timer(self, timer): # -> None:
        ...
    
    def remove_timer(self, timer): # -> None:
        ...
    
    def check_timers(self): # -> bool:
        ...
    
    def callback(self, etype, fd): # -> None:
        ...
    
    def handle_error(self, fd): # -> None:
        ...
    


class KqueueRegistrar(Registrar):
    def __init__(self) -> None:
        ...
    
    def abort(self): # -> None:
        ...
    
    def add(self, event): # -> None:
        ...
    
    def remove(self, event): # -> None:
        ...
    
    def check_events(self): # -> bool:
        ...
    


class SelectRegistrar(Registrar):
    def __init__(self) -> None:
        ...
    
    def add(self, event): # -> None:
        ...
    
    def remove(self, event): # -> None:
        ...
    
    def check_events(self): # -> bool:
        ...
    


class PollRegistrar(Registrar):
    def __init__(self) -> None:
        ...
    
    def add(self, event): # -> None:
        ...
    
    def remove(self, event): # -> None:
        ...
    
    def check_events(self): # -> bool:
        ...
    
    def register(self, fd): # -> None:
        ...
    


class EpollRegistrar(PollRegistrar):
    def __init__(self) -> None:
        ...
    


