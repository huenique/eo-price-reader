"""
This type stub file was generated by pyright.
"""

"""
R.E.L.
Registed Event Listener is a pure-python implementation of [pyevent](https://github.com/jaraco/pyevent),
which is a wrapper around [libevent](http://monkey.org/~provos/libevent/), providing an identical interface
without the need to compile C code, and without breaking the GIL / threading.

### basic functions:
    read(socket, callback, *args)
    write(socket, callback, *args)
    timeout(delay, callback, *args)
    signal(sig, callback, *args)
    event(callback,arg=None,evtype=0,handle=None)
    dispatch()
    loop()
    abort()
    abort_branch() (non-pyevent only)
    thread()
    init()

### registrars
rel will use the fastest registrar available on your system:

    supported_methods = ['epoll','poll','kqueue','select','pyevent']

The supported_methods[] registrar priority list, as well as other
settings, can be altered using the (optional) initialize() function:

### initialize(methods=supported_methods,options=()) - possible options:
    'verbose' - prints out certain events
    'report' - prints status of non-pyevent registrar every 5 seconds
    'strict' - ONLY try specified methods
    'threaded' - enable GIL hack -- pyevent only!

### override()
This override function can be used to seamlessly swap rel into
a pyevent application.
"""
def override(): # -> None:
    class fakemodule:
        ...
    
    

running = ...
registrar = ...
threader = ...
verbose = ...
supported_methods = ...
mapping = ...
class Thread_Checker:
    def __init__(self, threaded) -> None:
        ...
    
    def go(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def release(self, *args): # -> Literal[True]:
        ...
    
    def check(self): # -> Literal[True]:
        ...
    


def check_init(): # -> None:
    ...

def get_registrar(method): # -> Module("event"):
    ...

def initialize(methods=..., options=...):
    """
    initialize(methods=['epoll','poll','kqueue','select','pyevent'],options=[])
    possible options:
        'verbose' - prints out certain events
        'report' - prints status of non-pyevent registrar every 5 seconds
        'strict' - ONLY try specified methods
        'threaded' - enable GIL hack -- pyevent only!
    """
    ...

SAFE_READ = ...
def safe_read(): # -> None:
    ...

def read(sock, cb, *args):
    ...

def write(sock, cb, *args):
    ...

def timeout(delay, cb, *args):
    ...

def signal(sig, callback, *args):
    ...

def dispatch(): # -> None:
    ...

def loop(): # -> None:
    ...

def report():
    ...

def is_running(): # -> Literal[False]:
    ...

def abort(): # -> None:
    ...

def abort_branch(): # -> None:
    ...

def init(): # -> None:
    ...

def event(callback, arg=..., evtype=..., handle=...):
    ...

def thread(callback): # -> None:
    ...

def tick():
    ...

